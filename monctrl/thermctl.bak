#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <time.h>
#include <sched.h>
#include <math.h>
#include <sys/io.h>
#include <fcntl.h>
#include <errno.h>
#include <signal.h>

double readclock (void);
void toyrday (double, int *, int *, int *, int *, int *);
double tosecs (int, int, int, int, int);
int turnoffpwr(int,int);

int main(int argc, char **argv)
{ int usbdev;
  int status,i,chk,t,j,chkrec,usb,mode,m,mm,yr,da,hr,mn,sc,found;
  double set,tmp,pwr,secs,temp_limit;
  char command[16],resp[12],buf[256],txt[256];
  FILE *file1;

  temp_limit = 40.0;   // temperature for shut-down
// user has to be root unless user is a member of dialout group
  for(m=0;m<argc;m++){
  sscanf(argv[m], "%79s", buf);
   if (strstr(buf, "-help")) 
   {
     printf("program monitors oven controller and kills power to EDGES if there is a problem\n");
     return 0; 
    }
   if (strstr(buf, "-temp_limit")) 
     {
       sscanf(argv[m + 1], "%lf", &temp_limit); 
       printf("setting temp_limit to %f\n",temp_limit);
  }  }

  usb = found = 0;
  usb = 1;
  while (usb >= 0 && usb < 3 && found == 0){
  sprintf(txt,"stty -F /dev/ttyUSB%d 19200 cs8 -cstopb -parity -icanon min 1 time 1 clocal",usb);
  printf("%s\n", txt);
  system(txt);
  usbdev=0;
  sprintf(txt,"/dev/ttyUSB%d",usb);
  usbdev = open(txt,O_RDWR);

  set=tmp=pwr=0;
  for(mm=0;mm<3;mm++){
  t=2500; 
  mode= 0x40;  // read set point
  if(mm==1) mode= 0x01;  // read temp
  if(mm==2) mode= 0x04;  // read pwr
  sprintf(command,"*00%02x%08x",mode,t);

  chk=0; for(i=0;i<12;i++) chk += command[i+1];
  sprintf(&command[13],"%02x",(chk%256));
  command[15] = 0x0d;
  for (i=1;i<15;i++) printf("%1c",command[i]);
  printf("(etx=%x)\n",command[15]);
  status = 0;
  status = write(usbdev,command,16);
  printf("status %x\n",status);
  status=0;
  sleep(1);
  status = read(usbdev,resp,12);
  printf("status %x resp %s\n",status,resp);
  t=0; j=1; for(i=0;i<8;i++) { 
         if(resp[8-i] <= '9') m = '0'; else m = 'a' - 10; 
         t += (resp[8-i]-m)*j; j = j*16;
  }
  printf("revcd from %02x = %d %f\n",mode,t,t/100.0);
  if(mm==0) set = t/100.0;
  if(mm==1) tmp = t/100.0;
  if(mm==2) pwr = t*100.0/683.0;
  chkrec=0; for(i=0;i<8;i++) chkrec += resp[i+1];
  t=0; j=1; for(i=0;i<2;i++) {
         if(resp[10-i] <= '9') m = '0'; else m = 'a' - 10;
         t += (resp[10-i]-m)*j; j = j*16;
  }
  if(t == (chkrec%256)) found = 1;  // sucess found right device
  else {
     printf("chk error %x %x\n",t,chkrec%256);
     usb++; // try next device
       }
  }
  close(usbdev); 
  status = -1;
  if ((file1 = fopen("/media/DATA/EDGES_data/thermlog.txt", "a")) == NULL) {
        if ((file1 = fopen("/media/DATA/EDGES_data/thermlog.txt", "w")) == NULL) {
            printf("cannot write %s\n", "/media/DATA/EDGES_data/thermlog.txt");
            return 0;
        }
   status = 1;
   } else status = 1;
   if(status){
   secs = readclock();
   toyrday(secs, &yr, &da, &hr, &mn, &sc);
   fprintf(file1, "%4d:%03d:%02d:%02d:%02d  temp_set %7.2f deg_C tmp %7.2f deg_C pwr %7.2f percent\n", yr, da, hr, mn, sc, set, tmp, pwr);
   fclose(file1);
   }
   sleep(1);
   }
   if(tmp > temp_limit) {
         if(usb == 1) turnoffpwr(0,0);  // pwr control must be 0
         if(usb == 0) turnoffpwr(1,0);  // pwr control must be 1
   }
     return 0;
}

int turnoffpwr(int usb,int mode)
{
  { int usbdev;
  int status,i,pwr;
  char command[16],resp[2560],txt[256];
  mode = 0; pwr = -99;
  sprintf(txt,"stty -F /dev/ttyUSB%d 9600 cs8 -cstopb -parity -icanon min 1 time 1 clocal -echo",usb);
  system(txt);
  usbdev=0;
  sprintf(txt,"/dev/ttyUSB%d",usb);
  usbdev = open(txt,O_RDWR);

  if(mode==10) sprintf(command,"?\n");
  else sprintf(command,"$A7 %d\n",mode);
  if(mode==3) sprintf(command,"$A5\n");

//  printf("%d chars\n",(int)strlen(command));
//  for (i=0;i<(int)strlen(command);i++) printf("%x = %1c ",command[i],command[i]);
  status = 0;
  status = write(usbdev,command,strlen(command));
//  printf("status %d\n",status);
  sleep(3);
  status=0;
  for(i=0;i<2560;i++) resp[i]=0;
  status = read(usbdev,resp,2560);
//  printf("status = %d\n",status);
  for (i=0;i<status;i++) printf("%1c",resp[i]);
  close(usbdev);
  pwr = resp[0] - 48;
  if(mode==0) printf("power turned off\n");
  return pwr;
  }
}

/* Convert to Seconds since New Year 1970 */
double tosecs(int yr, int day, int hr, int min, int sec)
{
    int i;
    double secs;
    secs = (yr - 1970) * 31536000.0 + (day - 1) * 86400.0 + hr * 3600.0 + min * 60.0 + sec;
    for (i = 1970; i < yr; i++) {
        if ((i % 4 == 0 && i % 100 != 0) || i % 400 == 0)
            secs += 86400.0;
    }
    if (secs < 0.0)
        secs = 0.0;
    return secs;
}


double readclock(void)
{
    time_t now;
    double secs;
    struct tm *t;
    now = time(NULL);
    t = gmtime(&now);
// gmtime Jan 1 is day 0
    secs = tosecs(t->tm_year + 1900, t->tm_yday + 1, t->tm_hour, t->tm_min, t->tm_sec);
    return (secs);
}

void toyrday(double secs, int *pyear, int *pday, int *phr, int *pmin, int *psec)
{
    double days, day, sec;
    int i;
    day = floor(secs / 86400.0);
    sec = secs - day * 86400.0;
    for (i = 1970; day > 365; i++) {
        days = ((i % 4 == 0 && i % 100 != 0) || i % 400 == 0) ? 366.0 : 365.0;
        day -= days;
    }
    *phr = sec / 3600.0;
    sec -= *phr * 3600.0;
    *pmin = sec / 60.0;
    *psec = sec - *pmin * 60;
    *pyear = i;
    day = day + 1;
    *pday = day;
    if (day == 366)             // fix for problem with day 366
    {
        days = ((i % 4 == 0 && i % 100 != 0) || i % 400 == 0) ? 366 : 365;
        if (days == 365) {
            day -= 365;
            *pday = day;
            *pyear = i + 1;
        }
    }
}





