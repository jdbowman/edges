"""
Name: edges.py
Desc: Defines the EDGES class.  All of the primary EDGES functions are
      implemented in this class except the PX14400 spectrometer.
"""

import cameraSX
import ConfigParser
import errno
import ftplib
import math
import numpy as np
import os
import serial
import shutil
import socket
import struct
import time
import u3
import urllib2
import warnings
import csv
from array import array
from datetime import datetime
from PIL import Image
from subprocess import call



class edges:
  """
  Container class for EDGES functionality.

  Example:
  >>> import edges
  >>> d = edges.edges()
  >>> print d.getEnvironmentSensors()
  """


  def __init__(self, configFile='~/edges.ini'):
    """
    Name: edges.__init__()

    Args: (optional) configFile - the path the .ini settings file for EDGES.
                                  (default is ~/edges.ini)

    Desc: Instantiates a new edges object and loads the settings. 
    """
    self.settings = ConfigParser.ConfigParser()
    self.settings.read(os.path.expanduser(configFile))

    # Get $EDGES_HOME environment variable defining the location of the EDGES
    # installation directory.  Will return 'None' if the key is not present.
    self.datadir = self.settings.get('Installation', 'datadir')

    #if (self.homedir == 'None'):
    #  warnings.warn('EDGES: No homedir setting provided.' \
    #        'Proceeding without it.  Some operations may fail or cause ' \
    #        'unexpected results.')

    if (self.datadir == 'None'):
      warnings.warn('EDGES: No datadir setting provided.' \
            'Proceeding without it.  Some operations may fail or cause ' \
            'unexpected results.')

    self.labjack = None;


  def showSettings(self):
    """
    Name: edges.showSettings()

    Args: N/A

    Desc: Prints to stdout the configuration settings found the .ini file
          specified in the class constructor.
    """

    print('\nEDGES Local Configuration Settings\n')

    for section in self.settings.sections():
      print('[{}]'.format(section))

      for option in self.settings.options(section):
        print('  {}: {}'.format(option, self.settings.get(section, option)))

    print('\n')


        
  def getDataDir(self):
    """
    Name: edges.getDataDir()

    Args: N/A

    Desc: Returns the data directory of the EDGES installation
    """
    return self.datadir


  def getLocalLabJack(self):
    """
    Name: edges.getLocalLabJack()

    Args: N/A

    Desc: Returns the handle to the local LabJack  
    """
    if self.labjack == None:
      self.labjack = u3.U3();

    return self.labjack;

  

  def startVNASession(self):
    """
    Name: edges.startVNASession()

    Args: N/A

    Desc: Connects to the VNA and configures the Labjack.  Returns a dictionary
          containing the socket and device as keys.
    """
    # Open a socket to the VNA
    vnaAddress = self.settings.get('VNA', 'ip_address')
    vnaPort = int(self.settings.get('VNA', 'port'))

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((vnaAddress, vnaPort))

    # Get VNA model/serial number
    s.send('*IDN?\n')
    data = s.recv(100)

    print('Connected to VNA: {}'.format(data))

    # Send configuration settings
    s.send('SENS:FREQ:START 40e6;\n')
    s.send('SENS:FREQ:STOP 200e6;\n')
    s.send('SENS:SWE:POIN 151;\n')
    s.send('BWID 300;\n')
    s.send('AVER:COUN 1;\n')
    s.send('INIT:CONT 0;\n')
    s.send('SOUR:POW:ALC HIGH;\n')

    # Set internal memory as place to store data
    s.send('MMEM:CDIR "[INTERNAL]:";\n')

    # Pause
    time.sleep(10)

    # Opening the Labjack
    d = self.getLocalLabJack();

    # Channels 4-7 digital. 0-3 analog.
    d.configU3(FIOAnalog = 15)      
    d.configIO(FIOAnalog = 15)

    # Inverse logic, all outputs OFF
    d.setDOState(4, state = 1)      
    d.setDOState(5, state = 1)
    d.setDOState(6, state = 1)
    d.setDOState(7, state = 1)

    print('VNA session ready.')

    session = {'socket': s, 'device': d}

    return session



  def stopVNASession(self, session):
    """
    Name: edges.stopVNASession()

    Args: N/A

    Desc: Close the socket and reset the Labjack device
    """  	
    # Turn off switch
    session['device'].setDOState(4, state = 1)      
    session['device'].setDOState(5, state = 1)
    session['device'].setDOState(6, state = 1)
    session['device'].setDOState(7, state = 1)
    time.sleep(2)                

    # Close socket
    session['socket'].close()

    print('VNA session closed.')



  def getVNATrace(self, input, session):
    """
    Name: edges.getVNATrace()

    Args: input - 1 = OPEN
                  2 = SHORT
                  3 = MATCH
                  4 = LOAD/DUT
          session - the session object created by startVNASession()

    Desc: Acquires a single VNA trace on the specified input and returns the 
          text of the S1P file generated by the VNA.  Use the vna.py library
          to read the S1P text.
    """

    # Recall settings
    states = {1: (0,1,1,0), 2: (1,0,1,0), 3: (1,1,0,0), 4: (1,1,1,0)}
    vnaFile = 'EDGES.s1p'
    vnaAddress = self.settings.get('VNA', 'ip_address')

    # Set switch state to specified input
    print('Setting switch to input {}...'.format(input))
    session['device'].setDOState(4, state = states[input][0])
    session['device'].setDOState(5, state = states[input][1])
    session['device'].setDOState(6, state = states[input][2])
    session['device'].setDOState(7, state = states[input][3])
    time.sleep(2)

    # Measure trace
    print('Measuring trace...')
    session['socket'].send('INIT:IMM;\n')
    time.sleep(3)

    # Store trace onboard VNA
    print('Storing trace onboard...')
    session['socket'].send('MMEM:STOR:SNP "{}";\n'.format(vnaFile))
    time.sleep(3)

    # Transfering trace data
    print('Transferring trace...')
    session['socket'].send('MMEM:DATA? "{}";\n'.format(vnaFile))
    time.sleep(3)
    buffer = session['socket'].recv(40960)

    # Parse the data from csv into list
    #data = list(csv.reader(buffer[6:].split('\n'), delimiter='\t'))

    # Make separate lists for the trace, comments (headers), and the format rows
    #trace = [[float(i) for i in row] for row in data if (len(row) > 0 and (row[0][0] != '!' and row[0][0] != '#'))]
    #comments = [row for row in data if (len(row) > 0 and row[0][0] == '!')]
    #format = [row for row in data if (len(row) > 0 and row[0][0] == '#')]

    #if trace and len(trace) == 0:
    #  trace = None
    #if comments and len(comments) == 0:
    #  format = None
    #if format and len(format) == 0:
    #  format = None

    # If we recognize the format row, create labels for the output
    #labels = None
    #if (format and format[0][0]) == '# Hz S DB R 50':
    #  labels = ['Frequency [Hz]', 'S11_Mag [dB]', 'S11_Phase [deg]']
    
    print('Done.')

    return buffer[6:]



  def showThermalStatus(self):
    """
    Name: edges.showThermalStatus()

    Args: N/A

    Desc: Displays the configuration and current status of an Oven Industries
          thermal controller connected to the host PC over a USB-to-serial 
          interface.  Loops over all know "read" commands.
    """
  
    connection = self.openThermalConnection()
    if not connection:
      warnings.warn('EDGES: getThermalStatus aborting.  No connection.')
      return None 

    print('\nEDGES Thermal Controller Status\n')

    # Get the command dictionary
    thermal_cmds = self.getThermalDictionary()

    # Loop over all commands
    for key in sorted(thermal_cmds):

      # Only send the "read" commands
      if key.startswith('read'):
      
        # Show the response on stdout
        print("{}: {:.2f} {}".format( key.rjust(25), 
                                      self.sendThermalCommand(key), 
                                      thermal_cmds[key][2] ) )
    
    return None

    


  def getThermalDictionary(self):
    """
    Name: edges.getThermalCommandDictionary()

    Args: N/A

    Desc: Returns the Python dictionary mapping human-readable command names
          to hexadecimal command values, argument multipliers, and argument 
          physical unit labels for the Oven Industries thermal controller.
    """
    return {  'read_input1'         : (0x01, 100, 'degC'),
              'switch_input'        : (0x02, 1, ''),
              'read_input2'         : (0x03, 100, 'degC'),
              'read_power'          : (0x04, 100/683.0, '%'),
              'read_alarm_status'   : (0x05, 1, ''),
              'set_temp'            : (0x10, 100, 'degC'),
              'set_bandwidth'       : (0x11, 10, 'degC'),
              'set_gain'            : (0x12, 10, '---TBD units---'),
              'set_derivative'      : (0x13, 10, '---TBD units---'),
              'set_input1_offset'   : (0x14, 100, 'degC'),
              'set_input2_offset'   : (0x15, 100, 'degC'),
              'set_voltage'         : (0x16, 1000, 'degC'),
              'set_maxtemp'         : (0x1a, 100, 'degC'),
              'set_mintemp'         : (0x1b, 100, 'degC'),
              'set_heat_multiplier' : (0x1c, 1, ''),
              'set_output_enabled'  : (0x1d, 1, ''),
              'set_cool_multiplier' : (0x1c, 1, ''),
              'read_temp'           : (0x40, 100, 'degC'),
              'read_bandwidth'      : (0x41, 10, 'degC'),
              'read_gain'           : (0x42, 10, '--TBD units--'),
              'read_derivative'     : (0x43, 10, '--TBD units--'),
              'read_input1_offset'  : (0x44, 100, 'degC'),
              'read_input2_offset'  : (0x45, 100, 'degC'),
              'read_voltage'        : (0x46, 1000, 'V'),
              'read_alarm_settings' : (0x47, 1, ''),
              'read_cool_or_heat'   : (0x48, 1, ''),
              'read_alarm_enable'   : (0x49, 1, ''),
              'read_maxtemp'        : (0x4a, 100, 'degC'),
              'read_mintemp'        : (0x4b, 100, 'degC'),
              'read_heat_multiplier': (0x4c, 1, ''),
              'read_output_enabled' : (0x4d, 1, ''),
              'read_cool_multiplier': (0x4e, 1, '')  }




  def openThermalConnection(self, device='/dev/ttyUSB0'):
    """
    Name: edges.openThermalConnection()

    Args: (optional) device - specify the device location for the connection
                              (default: /dev/ttyUSB0)

    Desc: Opens a USB-to-serial connection to an Oven Industries thermal 
          controller connected to the host PC.
    """
    try:
      return serial.Serial(device, baudrate=19200, timeout=3.0)
    except:
      warnings.warn('EDGES: openThermalConnection failed to device {}.'.format(device))
      return None 

   




  def sendThermalCommand(self, cmdKey, arg=0, connection=None):
    """
    Name: edges.sendThermalCommand()

    Args: cmdKey - the command string from the thermal command dictionary
          arg - the argument for the command (if needed)

    Desc: Sends a command to the Oven Industries thermal controller connected
          to the host PC.  If a connection is not provided, then a new 
          connection is opened.  Returns the numeric response from the
          controller.  All command, argument, and response conditioning is 
          handled within this routine.  This routine takes about 1 second to
          execute because it must wait for the thermal controller response.
    """
    
    # Lookup the command provided
    try:
      cmdValues = self.getThermalDictionary()[cmdKey]
      cmdNumber = cmdValues[0]
      argMultiplier = cmdValues[1]
    except:
      warnings.warn('EDGES: sendThermalCommand aborting.  Lookup failed.')
      return None    

    # Open a new connection if needed
    if (not connection):
      connection = self.openThermalConnection()
      if (not connection):
        warnings.warn('EDGES: sendThermalCommand aborting.  No connection.')
        return None  

    # Prepare the command string
    cmdString = '*{:0>4x}{:0>8x}'.format(cmdNumber, int( (arg * argMultiplier) ))
    cmdChecksum = sum(bytearray(cmdString[1:])) % 256
    cmdString = '{}{:0>2x}\r'.format(cmdString, cmdChecksum)

    # Send the command string
    connection.write(cmdString)

    # Wait briefly, then read the response
    time.sleep(1)    
    response = connection.read(12)

    # Translate response from hex to decial
    responseValue = int('0x{}'.format(response[1:9]), 16) / float(argMultiplier)

    # Check that the response matches the checksum
    responseChecksum1 = sum(bytearray(response[1:9])) % 256
    responseChecksum2 = int('0x{}'.format(response[9:11]), 16)

    if (responseChecksum1 != responseChecksum2):
      warnings.warn('EDGES: sendThermalCommand checksum failed.')
      responseValue = None
   
    return responseValue



  def setOutlet(self, id, power):
    """
    Name: edges.setOutlet()

    Args: id - outlet ID (1 through N)
          power - turn the outlet on (1) or off (0)

    Desc: Turns an outlet on/off on the Synaccess Netbooter networked 
          power switch.  Returns True if successful, False otherwise.
    """

    data = self.sendPowerCommand('$A3', id, power).strip('\r\n')

    if data == '$A0':
      return True
    else:
      return False
  


  def getPowerStatus(self):
    """
    Name: edges.getPowerStatus()

    Args: N/A

    Desc: Returns the on/off status of the power outlets on the Synaccess
          Netbooter networked power switch.  The return value is a dictionary.  
          Each outlet is a key-value pair in the dictionary, keyed by the
          outlet number (1 through N).  A value of 1 = ON, 0 = OFF.  The dict
          also contains the total amperage currently used by the switch under
          the key 'amps'.  The routine returns None if the query failed.
    """
    data = self.sendPowerCommand('$A5').split(',')

    # Check if query succeeded
    if data[0] == '$A0':

      # If so, parse and pack the outlet status and amps
      values = [int(val) for val in data[1]]
      values.append(float(data[2]))

      keys = range(0, len(values))
      keys[0] = 'amps'

      return dict(zip(keys, values[::-1]))

    else:

      return None



  def sendPowerCommand(self, cmd, arg1='', arg2=''):
    """
    Name: edges.sendPowerCommand()

    Args: N/A

    Desc: Sends a command to the Synaccess Netbooter networked power switch
          using the HTTP interface.  Returns the text response.
    """
    # Get the connection info from the EDGES settings file
    ip = self.settings.get('Power', 'ip_address')
    username = self.settings.get('Power', 'username')
    password = self.settings.get('Power', 'password')

    # Create the authentication handler for the HTTP request
    auth_handler = urllib2.HTTPBasicAuthHandler()
    auth_handler.add_password(realm='Protected',
                              uri='http://' + ip,
                              user=username,
                              passwd=password)
    opener = urllib2.build_opener(auth_handler)

    url_cmd = 'http://{}/cmd.cgi?{}%20{}%20{}'.format(ip, cmd, arg1, arg2)

    try:
      result = opener.open(url_cmd).read().strip('\r\n')
    except urllib2.HTTPError, e: 
      result = None
      warnings.warn('EDGES: sendPowerCommand HTTP failure.\n\n{}'.format(e.headers))
  
    return result



  def getTimeList(self, timestamp):
    """
    Name: edges.getTimeList(timestamp)

    Args: timestamp - Python datetime object, typically acquire through a
                      command like: datetime.utcnow()

    Desc: Returns a list containing 'YEAR, DOY, HH, MM, SS'
    """   

    doy = int(datetime.strftime(timestamp, "%j"))
    return [now.year, doy, now.hour, now.minute, now.second]


  def parseFileDateString(self, timestr):
    """
    Name: edges.parseFileDateString(timestr)

    Args: timestr - A string formatted as one of the followin:
                                1 = 'YEAR'
                                2 = 'YEAR_DOY'
                                3 = 'YEAR_DOY_HH'
                                4 = 'YEAR_DOY_HH_MM'
                                5 = 'YEAR_DOY_HH_MM_SS'

    Desc: Returns a datetime object with the time specified by the input string
    """  
    level = len(timestr.split('_'))

    timestamp = None
    if level==1:    
      timestamp = datetime.strptime(timestr, '%Y')
    if level==2:    
      timestamp = datetime.strptime(timestr, '%Y_%j')
    if level==3:    
      timestamp = datetime.strptime(timestr, '%Y_%j_%H')
    if level==4:    
      timestamp = datetime.strptime(timestr, '%Y_%j_%H_%M')
    if level==5:    
      timestamp = datetime.strptime(timestr, '%Y_%j_%H_%M_%S')

    return timestamp


  def getFileDateString(self, timestamp, level=3):
    """
    Name: edges.getFileDateString(timestamp, level=3)

    Args: timestamp - Python datetime object, typically acquire through a
                      command like: datetime.utcnow()
          (optional) level - Specifies the returned string format according to:
                                1 = 'YEAR'
                                2 = 'YEAR_DOY'
                                3 = 'YEAR_DOY_HH'
                                4 = 'YEAR_DOY_HH_MM'
                                5 = 'YEAR_DOY_HH_MM_SS'

    Desc: Returns a string formatted as 'YEAR_DOY_HH_MM_SS' or similar,
          depending on the level specified.
    """  
    
    if level==1:
      datestring = datetime.strftime(timestamp, '%Y')
    elif level==2:
      datestring = datetime.strftime(timestamp, '%Y_%j')
    elif level==3:
      datestring = datetime.strftime(timestamp, '%Y_%j_%H')
    elif level==4:
      datestring = datetime.strftime(timestamp, '%Y_%j_%H_%M')
    elif level==5:
      datestring = datetime.strftime(timestamp, '%Y_%j_%H_%M_%S')
    else:
      datestring = None
      warnings.warn('EDGES: getFileDateString bad level argument.')

    return datestring


  def getFullPath(self, subdir, suffix, timestamp, level=5):
    """
    Name: edges.getFullPath(subdir, suffix, timestamp, level=5)

    Args: subdir    - usually site/instrument
          suffix    - name to append to file after timestamp.  Be sure to include the file type (such as .txt)
          timestamp - Python datetime object, typically acquire through a
                      command like: datetime.utcnow()
          level     - How much detail to use in the timestamp (see getFileDateString)


    Desc: Returns a string for the full path for the subdir, suffix, and timestamp 
          provided in the format:  [edges root dir] / subdir / timestamp_suffix
    """  
    return self.datadir + '/' + subdir + '/' + self.getFileDateString(timestamp, level) + '_' + suffix


  def writeDataToTextFile(self, subdir, suffix, timestamp, data, format, labels=None, breaklevel=5):
    """
    Name: edges.writeTextData(subdir, suffix, timestamp, data, labels, breaklevel=5)

    Args: subdir - subdirectory under the main EDGES data directory
          suffix - string to append to the filename
          timestamp - Python dateime object giving time of data acquisition 
                      (used for filename only)
          data - The data to write to the text file (two-dim array)
          (optional) labels - String of column names
          (optional) breaklevel - see writeRecord for level details (default here is 5)
          
    Desc: Write a 2D array of data to a file following the conventions described
          in edges.appendToTextFile().  The data row is either appended to an
          existing file or a new file is created at the internval specified by
          the "breaklevel" argument. 
          
    """ 

    filename = self.getFileDateString(timestamp, breaklevel) + '_' + suffix + '.txt'
    path = self.datadir + '/' + subdir + '/' + filename

    return self.appendToTextFile( path, 
                                  data, 
                                  format, 
                                  labels )



  def writeText(self, subdir, suffix, timestamp, text, header, breaklevel=2):
    """
    Name: edges.writeText(subdir, suffix, timestamp, data, labels, breaklevel=2)

    Args: subdir - subdirectory under the main EDGES data directory
          suffix - string to append to the filename
          timestamp - Python dateime object giving time of data acquisition 
                      (used for filename and as first entry for record)
          text - The text to write to the file
          header - String for the fist line
          (optional) breaklevel - How often to start a new file (default here is 2)
                                    1 = Once per year
                                    2 = Once per day
                                    3 = Once per hour
                                    4 = Once per minute
                                    5 = Once per second
          
    Desc: Write a new row of data to a file following the conventions described
          in edges.appendToTextFile().  The data row is either appended to an
          existing file or a new file is created at the internval specified by
          the "breaklevel" argument. 
          
    """ 

    filename = self.getFileDateString(timestamp, breaklevel) + '_' + suffix + '.txt'
    path = self.datadir + '/' + subdir + '/' + filename
    timestring = datetime.strftime(timestamp, '%Y:%j:%H:%M:%S')
    format= "%s '%s'"

    return self.appendToTextFile( path, 
                                  (timestring, ) + tuple([text]), 
                                  format, 
                                  ('Timestamp', ) + tuple([header]) )



  def writeRecord(self, subdir, suffix, timestamp, data, labels, breaklevel=2):
    """
    Name: edges.writeRecord(subdir, suffix, timestamp, data, labels, breaklevel=2)

    Args: subdir - subdirectory under the main EDGES data directory
          suffix - string to append to the filename
          timestamp - Python dateime object giving time of data acquisition 
                      (used for filename and as first entry for record)
          data - The data to write to the record file (one-dim array)
          labels - String of column names for the data entries
          (optional) breaklevel - How often to start a new file (default here is 2)
                                    1 = Once per year
                                    2 = Once per day
                                    3 = Once per hour
                                    4 = Once per minute
                                    5 = Once per second
          
    Desc: Write a new row of data to a file following the conventions described
          in edges.appendToTextFile().  The data row is either appended to an
          existing file or a new file is created at the internval specified by
          the "breaklevel" argument. 
          
    """ 

    filename = self.getFileDateString(timestamp, breaklevel) + '_' + suffix + '.txt'
    path = self.datadir + '/' + subdir + '/' + filename
    timestring = datetime.strftime(timestamp, '%Y:%j:%H:%M:%S')
    format= '%s' + (', %6.2f' * len(data))

    return self.appendToTextFile( path, 
                                  (timestring, ) + tuple(data), 
                                  format, 
                                  ('Timestamp',) + tuple(labels) )
    
      

  def appendToTextFile(self, filename, data, formatstr, labels=None):
    """
    Name: edges.appendToTextFile(filename, data, formatstr, labels=None)

    Args: filename - destination file (will be created if doesn't exist)
          data - list, tuple or iterator of numeric data to write to file
          formatstr - format string following Python "%" conventions
          (optional) labels  - list or tuple of column labels
          
    Desc: Append a line of data to the specified text file.  If the file does
          not exist, it will be created.  If the file directory does not exist,
          it will be created.  If labels is provided, they will be written at 
          the top of a new file and ignored when appending to an existing file.
    """  

    # Check if the file already exists
    bExists = os.path.exists(filename)

    if not bExists:

      # The file does not exist.  Make sure its directory does.
      dirs = os.path.dirname(filename)
      try:
        os.makedirs(dirs)

      # If the directory already exists, ignore the error.  But pass along
      # any other errors
      except OSError as exception:
        if exception.errno != errno.EEXIST:
          raise

    # Open the file
    try: 
      with open(filename,'a') as file:

        # If we just created the file, write the header string and labels
        if not bExists:
          file.write('# Site: {}, Instrument: {}\n'.format(
            self.settings.get('Installation', 'site'),
            self.settings.get('Installation', 'instrument') ))

          if labels is not None:
            file.write('# ' + ', '.join(labels).strip('\r\n') + '\n')
          
        # Write the data string (and make sure the line ends with a single
        # newline character)
        formatline = (formatstr.strip('\r\n') + '\n')  
        if isinstance(data[0], list):
          for row in data:
            file.write(formatline % tuple(row))
        else:
          file.write(formatline % tuple(data))

    except:
      warnings.warn('EDGES: appendToTextFile failed write.')
      return False

    return True

  



  def getEnvironmentSensors(self):
    """
    Name: edges.getEnvironmentSensors()

    Args: N/A

    Desc: Reads the analog input terminals from an attached Labjack U3.  
          Returns a list containing:

            1.  Relative humidity [%]
            2.  Temperature 1 [K]
            3.  Temperature 2 [K] 
            4.  Temperature onboard LabJack [K]
          
          All returned values have appropriate calibration applied assuming 
          15 kOhm thermistors.  The relative humidity is calculated using 
          Temperature 1.
    """

    # Define constants for temperature and relative humidty calculation
    t1 = -0.000163528;
    t2 =  0.000436689;
    t3 = -6.483802589e-7;
    f1 = 0.001296751267466723;
    f2 = 0.00019737361897609893;
    f3 = 3.0403175473012516e-7;
    h1 = -1.91e-9;
    h2 =  1.33e-5;
    h3 =  9.56e-3;
    h4 = -2.16e1;
    r1 = 36000.0;

    # Opening Labjack device
    d = self.getLocalLabJack();
    d.getCalibrationData()

    # Read the relevant inputs
    voltageHum = d.getAIN(2)
    voltageTemp1 = d.getAIN(3)
    voltageTemp2 = d.getAIN(0)
    tempOnboard = d.getTemperature()

    # Convert temperature voltage to resistance
    resistanceTemp1 = (voltageTemp1 * r1) / (5.0 - voltageTemp1);
    resistanceTemp2 = (voltageTemp2 * r1) / (5.0 - voltageTemp2);
   
    # Convert temperature resistance to temperature (in Kelvin) using 
    # Steinhart-Hart equation 
    temp1 = 1.0 / (t1 + t2*math.log(resistanceTemp1) + t3*math.log(resistanceTemp1)**3.0);
    temp2 = 1.0 / (f1 + f2*math.log(resistanceTemp2) + f3*math.log(resistanceTemp2)**3.0);
  
    # Adjustment of labjack read voltage
    voltageHum = voltageHum * 1000.0 * 1.5;

    # Uncorrected relative humidity (RH in %)
    hum = h1*(voltageHum**3) + h2*(voltageHum**2) + h3*voltageHum + h4;

    # Corrected relative humidity (using temperature in Kelvin).  This
    # seems to be small correction.
    hum = hum + (temp1 - 23.0 - 273.15)*0.05;

    return [hum, temp1, temp2,tempOnboard]



  def getASKAPWebcam(self, filename):
    """
    Name: edges.getASKAPWebcam(filename)

    Args: filename - specifies where to write the retrieved file 

    Desc: Retrieves the ASKAP webcam webpage, identifies the URL of the latest 
          webcam image and downloads the image into the filename specified.  The
          ASKAP webcam produces JPG files.
    """

    # Download webcam page
    url = "http://www.atnf.csiro.au/projects/askap/webcam/"
    page = urllib2.urlopen(url)
    data = page.read()

    # Search for latest image URL
    str = "camera_1/gnomecam_"
    strlen = len(str)
    index = data.find(str)

    # Open latest image
    imgind = index+strlen
    imgurl = "http://www.atnf.csiro.au/projects/askap/webcam/" + str + data[imgind:imgind+8]
    imgpage = urllib2.urlopen(imgurl)

    # Retrieve image into file
    file = open(filename, "wb")
    file.write(imgpage.read())
    file.close



  def getLocalUSBCamera(self, filename, z=6):
    """
    Name: edges.getLocalUSBCamera(filename, z=6)

    Args: filename - specifies where to write the retrieved file 
          z - specifies the PNG compression to use (0 is none, 9 is highest)

    Desc: Retrieves a frame from the local USB camera and saves it as a PNG
          file.  This routine relies on the external mplayer application to 
          connect to the camera and stream several frames to the /tmp directory 
          in order to give the camera time to adjust its exposure and focus 
          automatically.  The final frame from mplayer is copied to the 
          specified filename.

          If not already installed, mplayer can be added to Ubuntu using:
          >>> sudo apt-get install mplayer
    """

    call(['mplayer', 
          'tv://', '-tv', 
          'width=1920:height=1080', 
          '-frames', '10', 
          '-vo', 'png:outdir=/tmp/:z=' + str(z)])

    shutil.copy2('/tmp/00000010.png', filename)

  #  call(['ffmpeg', 
  #        '-f', 'video4linux2', 
  #        '-s', '1920x1080', 
  #        '-i', '/dev/video0', 
  #        '-vframes', '1', 
  #        filename])




  def getLocalSXCamera(self, filename):
    """
    Name: edges.getLocalSXCamera(filename)

    Args: filename   - specifies where to write the retrieved file 

    Desc: Retrieves a frame from the local Starlight Xpress (SX) camera.  EDGES
          uses an SX Oculus camera for all-sky images.  The camera does not have
          automatic exposure control, so this routine acquires several frames
          until the resulting image has appropriate statistics.  The exposures
          range from 1 ms to 120 seconds, so it may take several minutes to
          complete.  The resulting image is saved as a PNG file.

          This routine depends on the 'python-usb' library.  The apt-get version
          for Ubuntu has not worked in our experience, so download and install
          the library directly from the PyUSB website:

          http://walac.github.io/pyusb/
          
    """

    sx = cameraSX.cameraSX()

    if not (sx.connect(sx.SX_PRODUCT_ID_OCULUS)):
      print ("Failed to connect to all-sky camera!")
    else:
      print ("Connected to all-sky camera.")

      sx.reset()
      params = sx.getCCDParams()
      width = params['WIDTH']
      height = params['HEIGHT']

      exposure = 500  
      target = 2**13
      threshold = 0.1
      ratio = 0.5
      max_exposure = 120000
      min_exposure = 1
      counter = 0

      while ( (abs(ratio - 1) > threshold) and (exposure<max_exposure) and (counter < 5)): 

        counter += 1
        exposure /= ratio

        if (exposure > max_exposure):
          exposure = max_exposure
        elif (exposure < min_exposure):
          exposure = min_exposure
    
        print ("Capturing image (exposure: %d ms)..." % exposure)
        pixels = sx.captureImage(0, 0, width, height, 1, 1, exposure)
        median = np.median(pixels[250:750,400:900])
        ratio = (median-1500) / target
        print ("counter: %d median: %6.2f  target: %6.2f  ratio: %6.2f  diff: %6.2f" % 
                (counter, median, target, ratio, abs(ratio-1)))

      print ("Saving imaging to %s" % filename)
      image = Image.fromarray(pixels.astype(np.int32))
      image.save(filename)



